// Package chroma provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package chroma

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
)

// Defines values for GetEmbeddingInclude.
const (
	GetEmbeddingIncludeDistances  GetEmbeddingInclude = "distances"
	GetEmbeddingIncludeDocuments  GetEmbeddingInclude = "documents"
	GetEmbeddingIncludeEmbeddings GetEmbeddingInclude = "embeddings"
	GetEmbeddingIncludeMetadatas  GetEmbeddingInclude = "metadatas"
)

// Defines values for QueryEmbeddingInclude.
const (
	QueryEmbeddingIncludeDistances  QueryEmbeddingInclude = "distances"
	QueryEmbeddingIncludeDocuments  QueryEmbeddingInclude = "documents"
	QueryEmbeddingIncludeEmbeddings QueryEmbeddingInclude = "embeddings"
	QueryEmbeddingIncludeMetadatas  QueryEmbeddingInclude = "metadatas"
)

// AddEmbedding defines model for AddEmbedding.
type AddEmbedding struct {
	Documents      *AddEmbedding_Documents `json:"documents,omitempty"`
	Embeddings     []interface{}           `json:"embeddings"`
	Ids            *AddEmbedding_Ids       `json:"ids,omitempty"`
	IncrementIndex *bool                   `json:"increment_index,omitempty"`
	Metadatas      *AddEmbedding_Metadatas `json:"metadatas,omitempty"`
}

// AddEmbeddingDocuments0 defines model for .
type AddEmbeddingDocuments0 = string

// AddEmbeddingDocuments1 defines model for .
type AddEmbeddingDocuments1 = []interface{}

// AddEmbedding_Documents defines model for AddEmbedding.Documents.
type AddEmbedding_Documents struct {
	union json.RawMessage
}

// AddEmbeddingIds0 defines model for .
type AddEmbeddingIds0 = string

// AddEmbeddingIds1 defines model for .
type AddEmbeddingIds1 = []interface{}

// AddEmbedding_Ids defines model for AddEmbedding.Ids.
type AddEmbedding_Ids struct {
	union json.RawMessage
}

// AddEmbeddingMetadatas0 defines model for .
type AddEmbeddingMetadatas0 = []interface{}

// AddEmbeddingMetadatas1 defines model for .
type AddEmbeddingMetadatas1 = map[string]interface{}

// AddEmbedding_Metadatas defines model for AddEmbedding.Metadatas.
type AddEmbedding_Metadatas struct {
	union json.RawMessage
}

// CreateCollection defines model for CreateCollection.
type CreateCollection struct {
	GetOrCreate *bool                   `json:"get_or_create,omitempty"`
	Metadata    *map[string]interface{} `json:"metadata,omitempty"`
	Name        string                  `json:"name"`
}

// DeleteEmbedding defines model for DeleteEmbedding.
type DeleteEmbedding struct {
	Ids           *[]interface{}          `json:"ids,omitempty"`
	Where         *map[string]interface{} `json:"where,omitempty"`
	WhereDocument *map[string]interface{} `json:"where_document,omitempty"`
}

// GetEmbedding defines model for GetEmbedding.
type GetEmbedding struct {
	Ids           *[]interface{}          `json:"ids,omitempty"`
	Include       *[]GetEmbeddingInclude  `json:"include,omitempty"`
	Limit         *int                    `json:"limit,omitempty"`
	Offset        *int                    `json:"offset,omitempty"`
	Sort          *string                 `json:"sort,omitempty"`
	Where         *map[string]interface{} `json:"where,omitempty"`
	WhereDocument *map[string]interface{} `json:"where_document,omitempty"`
}

// GetEmbeddingInclude defines model for GetEmbedding.Include.
type GetEmbeddingInclude string

// HTTPValidationError defines model for HTTPValidationError.
type HTTPValidationError struct {
	Detail *[]ValidationError `json:"detail,omitempty"`
}

// QueryEmbedding defines model for QueryEmbedding.
type QueryEmbedding struct {
	Include         *[]QueryEmbeddingInclude `json:"include,omitempty"`
	NResults        *int                     `json:"n_results,omitempty"`
	QueryEmbeddings []interface{}            `json:"query_embeddings"`
	Where           *map[string]interface{}  `json:"where,omitempty"`
	WhereDocument   *map[string]interface{}  `json:"where_document,omitempty"`
}

// QueryEmbeddingInclude defines model for QueryEmbedding.Include.
type QueryEmbeddingInclude string

// RawSql defines model for RawSql.
type RawSql struct {
	RawSql *string `json:"raw_sql,omitempty"`
}

// UpdateCollection defines model for UpdateCollection.
type UpdateCollection struct {
	NewMetadata *map[string]interface{} `json:"new_metadata,omitempty"`
	NewName     *string                 `json:"new_name,omitempty"`
}

// UpdateEmbedding defines model for UpdateEmbedding.
type UpdateEmbedding struct {
	Documents      *UpdateEmbedding_Documents `json:"documents,omitempty"`
	Embeddings     *[]interface{}             `json:"embeddings,omitempty"`
	Ids            *UpdateEmbedding_Ids       `json:"ids,omitempty"`
	IncrementIndex *bool                      `json:"increment_index,omitempty"`
	Metadatas      *UpdateEmbedding_Metadatas `json:"metadatas,omitempty"`
}

// UpdateEmbeddingDocuments0 defines model for .
type UpdateEmbeddingDocuments0 = string

// UpdateEmbeddingDocuments1 defines model for .
type UpdateEmbeddingDocuments1 = []interface{}

// UpdateEmbedding_Documents defines model for UpdateEmbedding.Documents.
type UpdateEmbedding_Documents struct {
	union json.RawMessage
}

// UpdateEmbeddingIds0 defines model for .
type UpdateEmbeddingIds0 = string

// UpdateEmbeddingIds1 defines model for .
type UpdateEmbeddingIds1 = []interface{}

// UpdateEmbedding_Ids defines model for UpdateEmbedding.Ids.
type UpdateEmbedding_Ids struct {
	union json.RawMessage
}

// UpdateEmbeddingMetadatas0 defines model for .
type UpdateEmbeddingMetadatas0 = []interface{}

// UpdateEmbeddingMetadatas1 defines model for .
type UpdateEmbeddingMetadatas1 = map[string]interface{}

// UpdateEmbedding_Metadatas defines model for UpdateEmbedding.Metadatas.
type UpdateEmbedding_Metadatas struct {
	union json.RawMessage
}

// ValidationError defines model for ValidationError.
type ValidationError struct {
	Loc  []ValidationError_Loc_Item `json:"loc"`
	Msg  string                     `json:"msg"`
	Type string                     `json:"type"`
}

// ValidationErrorLoc0 defines model for .
type ValidationErrorLoc0 = string

// ValidationErrorLoc1 defines model for .
type ValidationErrorLoc1 = int

// ValidationError_Loc_Item defines model for ValidationError.loc.Item.
type ValidationError_Loc_Item struct {
	union json.RawMessage
}

// CreateCollectionJSONRequestBody defines body for CreateCollection for application/json ContentType.
type CreateCollectionJSONRequestBody = CreateCollection

// UpdateCollectionJSONRequestBody defines body for UpdateCollection for application/json ContentType.
type UpdateCollectionJSONRequestBody = UpdateCollection

// AddJSONRequestBody defines body for Add for application/json ContentType.
type AddJSONRequestBody = AddEmbedding

// DeleteJSONRequestBody defines body for Delete for application/json ContentType.
type DeleteJSONRequestBody = DeleteEmbedding

// GetJSONRequestBody defines body for Get for application/json ContentType.
type GetJSONRequestBody = GetEmbedding

// GetNearestNeighborsJSONRequestBody defines body for GetNearestNeighbors for application/json ContentType.
type GetNearestNeighborsJSONRequestBody = QueryEmbedding

// UpdateJSONRequestBody defines body for Update for application/json ContentType.
type UpdateJSONRequestBody = UpdateEmbedding

// RawSqlJSONRequestBody defines body for RawSql for application/json ContentType.
type RawSqlJSONRequestBody = RawSql

// AsAddEmbeddingDocuments0 returns the union data inside the AddEmbedding_Documents as a AddEmbeddingDocuments0
func (t AddEmbedding_Documents) AsAddEmbeddingDocuments0() (AddEmbeddingDocuments0, error) {
	var body AddEmbeddingDocuments0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromAddEmbeddingDocuments0 overwrites any union data inside the AddEmbedding_Documents as the provided AddEmbeddingDocuments0
func (t *AddEmbedding_Documents) FromAddEmbeddingDocuments0(v AddEmbeddingDocuments0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeAddEmbeddingDocuments0 performs a merge with any union data inside the AddEmbedding_Documents, using the provided AddEmbeddingDocuments0
func (t *AddEmbedding_Documents) MergeAddEmbeddingDocuments0(v AddEmbeddingDocuments0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

// AsAddEmbeddingDocuments1 returns the union data inside the AddEmbedding_Documents as a AddEmbeddingDocuments1
func (t AddEmbedding_Documents) AsAddEmbeddingDocuments1() (AddEmbeddingDocuments1, error) {
	var body AddEmbeddingDocuments1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromAddEmbeddingDocuments1 overwrites any union data inside the AddEmbedding_Documents as the provided AddEmbeddingDocuments1
func (t *AddEmbedding_Documents) FromAddEmbeddingDocuments1(v AddEmbeddingDocuments1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeAddEmbeddingDocuments1 performs a merge with any union data inside the AddEmbedding_Documents, using the provided AddEmbeddingDocuments1
func (t *AddEmbedding_Documents) MergeAddEmbeddingDocuments1(v AddEmbeddingDocuments1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

func (t AddEmbedding_Documents) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *AddEmbedding_Documents) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsAddEmbeddingIds0 returns the union data inside the AddEmbedding_Ids as a AddEmbeddingIds0
func (t AddEmbedding_Ids) AsAddEmbeddingIds0() (AddEmbeddingIds0, error) {
	var body AddEmbeddingIds0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromAddEmbeddingIds0 overwrites any union data inside the AddEmbedding_Ids as the provided AddEmbeddingIds0
func (t *AddEmbedding_Ids) FromAddEmbeddingIds0(v AddEmbeddingIds0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeAddEmbeddingIds0 performs a merge with any union data inside the AddEmbedding_Ids, using the provided AddEmbeddingIds0
func (t *AddEmbedding_Ids) MergeAddEmbeddingIds0(v AddEmbeddingIds0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

// AsAddEmbeddingIds1 returns the union data inside the AddEmbedding_Ids as a AddEmbeddingIds1
func (t AddEmbedding_Ids) AsAddEmbeddingIds1() (AddEmbeddingIds1, error) {
	var body AddEmbeddingIds1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromAddEmbeddingIds1 overwrites any union data inside the AddEmbedding_Ids as the provided AddEmbeddingIds1
func (t *AddEmbedding_Ids) FromAddEmbeddingIds1(v AddEmbeddingIds1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeAddEmbeddingIds1 performs a merge with any union data inside the AddEmbedding_Ids, using the provided AddEmbeddingIds1
func (t *AddEmbedding_Ids) MergeAddEmbeddingIds1(v AddEmbeddingIds1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

func (t AddEmbedding_Ids) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *AddEmbedding_Ids) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsAddEmbeddingMetadatas0 returns the union data inside the AddEmbedding_Metadatas as a AddEmbeddingMetadatas0
func (t AddEmbedding_Metadatas) AsAddEmbeddingMetadatas0() (AddEmbeddingMetadatas0, error) {
	var body AddEmbeddingMetadatas0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromAddEmbeddingMetadatas0 overwrites any union data inside the AddEmbedding_Metadatas as the provided AddEmbeddingMetadatas0
func (t *AddEmbedding_Metadatas) FromAddEmbeddingMetadatas0(v AddEmbeddingMetadatas0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeAddEmbeddingMetadatas0 performs a merge with any union data inside the AddEmbedding_Metadatas, using the provided AddEmbeddingMetadatas0
func (t *AddEmbedding_Metadatas) MergeAddEmbeddingMetadatas0(v AddEmbeddingMetadatas0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

// AsAddEmbeddingMetadatas1 returns the union data inside the AddEmbedding_Metadatas as a AddEmbeddingMetadatas1
func (t AddEmbedding_Metadatas) AsAddEmbeddingMetadatas1() (AddEmbeddingMetadatas1, error) {
	var body AddEmbeddingMetadatas1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromAddEmbeddingMetadatas1 overwrites any union data inside the AddEmbedding_Metadatas as the provided AddEmbeddingMetadatas1
func (t *AddEmbedding_Metadatas) FromAddEmbeddingMetadatas1(v AddEmbeddingMetadatas1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeAddEmbeddingMetadatas1 performs a merge with any union data inside the AddEmbedding_Metadatas, using the provided AddEmbeddingMetadatas1
func (t *AddEmbedding_Metadatas) MergeAddEmbeddingMetadatas1(v AddEmbeddingMetadatas1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

func (t AddEmbedding_Metadatas) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *AddEmbedding_Metadatas) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsUpdateEmbeddingDocuments0 returns the union data inside the UpdateEmbedding_Documents as a UpdateEmbeddingDocuments0
func (t UpdateEmbedding_Documents) AsUpdateEmbeddingDocuments0() (UpdateEmbeddingDocuments0, error) {
	var body UpdateEmbeddingDocuments0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromUpdateEmbeddingDocuments0 overwrites any union data inside the UpdateEmbedding_Documents as the provided UpdateEmbeddingDocuments0
func (t *UpdateEmbedding_Documents) FromUpdateEmbeddingDocuments0(v UpdateEmbeddingDocuments0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeUpdateEmbeddingDocuments0 performs a merge with any union data inside the UpdateEmbedding_Documents, using the provided UpdateEmbeddingDocuments0
func (t *UpdateEmbedding_Documents) MergeUpdateEmbeddingDocuments0(v UpdateEmbeddingDocuments0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

// AsUpdateEmbeddingDocuments1 returns the union data inside the UpdateEmbedding_Documents as a UpdateEmbeddingDocuments1
func (t UpdateEmbedding_Documents) AsUpdateEmbeddingDocuments1() (UpdateEmbeddingDocuments1, error) {
	var body UpdateEmbeddingDocuments1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromUpdateEmbeddingDocuments1 overwrites any union data inside the UpdateEmbedding_Documents as the provided UpdateEmbeddingDocuments1
func (t *UpdateEmbedding_Documents) FromUpdateEmbeddingDocuments1(v UpdateEmbeddingDocuments1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeUpdateEmbeddingDocuments1 performs a merge with any union data inside the UpdateEmbedding_Documents, using the provided UpdateEmbeddingDocuments1
func (t *UpdateEmbedding_Documents) MergeUpdateEmbeddingDocuments1(v UpdateEmbeddingDocuments1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

func (t UpdateEmbedding_Documents) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *UpdateEmbedding_Documents) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsUpdateEmbeddingIds0 returns the union data inside the UpdateEmbedding_Ids as a UpdateEmbeddingIds0
func (t UpdateEmbedding_Ids) AsUpdateEmbeddingIds0() (UpdateEmbeddingIds0, error) {
	var body UpdateEmbeddingIds0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromUpdateEmbeddingIds0 overwrites any union data inside the UpdateEmbedding_Ids as the provided UpdateEmbeddingIds0
func (t *UpdateEmbedding_Ids) FromUpdateEmbeddingIds0(v UpdateEmbeddingIds0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeUpdateEmbeddingIds0 performs a merge with any union data inside the UpdateEmbedding_Ids, using the provided UpdateEmbeddingIds0
func (t *UpdateEmbedding_Ids) MergeUpdateEmbeddingIds0(v UpdateEmbeddingIds0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

// AsUpdateEmbeddingIds1 returns the union data inside the UpdateEmbedding_Ids as a UpdateEmbeddingIds1
func (t UpdateEmbedding_Ids) AsUpdateEmbeddingIds1() (UpdateEmbeddingIds1, error) {
	var body UpdateEmbeddingIds1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromUpdateEmbeddingIds1 overwrites any union data inside the UpdateEmbedding_Ids as the provided UpdateEmbeddingIds1
func (t *UpdateEmbedding_Ids) FromUpdateEmbeddingIds1(v UpdateEmbeddingIds1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeUpdateEmbeddingIds1 performs a merge with any union data inside the UpdateEmbedding_Ids, using the provided UpdateEmbeddingIds1
func (t *UpdateEmbedding_Ids) MergeUpdateEmbeddingIds1(v UpdateEmbeddingIds1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

func (t UpdateEmbedding_Ids) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *UpdateEmbedding_Ids) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsUpdateEmbeddingMetadatas0 returns the union data inside the UpdateEmbedding_Metadatas as a UpdateEmbeddingMetadatas0
func (t UpdateEmbedding_Metadatas) AsUpdateEmbeddingMetadatas0() (UpdateEmbeddingMetadatas0, error) {
	var body UpdateEmbeddingMetadatas0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromUpdateEmbeddingMetadatas0 overwrites any union data inside the UpdateEmbedding_Metadatas as the provided UpdateEmbeddingMetadatas0
func (t *UpdateEmbedding_Metadatas) FromUpdateEmbeddingMetadatas0(v UpdateEmbeddingMetadatas0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeUpdateEmbeddingMetadatas0 performs a merge with any union data inside the UpdateEmbedding_Metadatas, using the provided UpdateEmbeddingMetadatas0
func (t *UpdateEmbedding_Metadatas) MergeUpdateEmbeddingMetadatas0(v UpdateEmbeddingMetadatas0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

// AsUpdateEmbeddingMetadatas1 returns the union data inside the UpdateEmbedding_Metadatas as a UpdateEmbeddingMetadatas1
func (t UpdateEmbedding_Metadatas) AsUpdateEmbeddingMetadatas1() (UpdateEmbeddingMetadatas1, error) {
	var body UpdateEmbeddingMetadatas1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromUpdateEmbeddingMetadatas1 overwrites any union data inside the UpdateEmbedding_Metadatas as the provided UpdateEmbeddingMetadatas1
func (t *UpdateEmbedding_Metadatas) FromUpdateEmbeddingMetadatas1(v UpdateEmbeddingMetadatas1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeUpdateEmbeddingMetadatas1 performs a merge with any union data inside the UpdateEmbedding_Metadatas, using the provided UpdateEmbeddingMetadatas1
func (t *UpdateEmbedding_Metadatas) MergeUpdateEmbeddingMetadatas1(v UpdateEmbeddingMetadatas1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

func (t UpdateEmbedding_Metadatas) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *UpdateEmbedding_Metadatas) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsValidationErrorLoc0 returns the union data inside the ValidationError_Loc_Item as a ValidationErrorLoc0
func (t ValidationError_Loc_Item) AsValidationErrorLoc0() (ValidationErrorLoc0, error) {
	var body ValidationErrorLoc0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromValidationErrorLoc0 overwrites any union data inside the ValidationError_Loc_Item as the provided ValidationErrorLoc0
func (t *ValidationError_Loc_Item) FromValidationErrorLoc0(v ValidationErrorLoc0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeValidationErrorLoc0 performs a merge with any union data inside the ValidationError_Loc_Item, using the provided ValidationErrorLoc0
func (t *ValidationError_Loc_Item) MergeValidationErrorLoc0(v ValidationErrorLoc0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

// AsValidationErrorLoc1 returns the union data inside the ValidationError_Loc_Item as a ValidationErrorLoc1
func (t ValidationError_Loc_Item) AsValidationErrorLoc1() (ValidationErrorLoc1, error) {
	var body ValidationErrorLoc1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromValidationErrorLoc1 overwrites any union data inside the ValidationError_Loc_Item as the provided ValidationErrorLoc1
func (t *ValidationError_Loc_Item) FromValidationErrorLoc1(v ValidationErrorLoc1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeValidationErrorLoc1 performs a merge with any union data inside the ValidationError_Loc_Item, using the provided ValidationErrorLoc1
func (t *ValidationError_Loc_Item) MergeValidationErrorLoc1(v ValidationErrorLoc1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

func (t ValidationError_Loc_Item) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *ValidationError_Loc_Item) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// Root request
	Root(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListCollections request
	ListCollections(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateCollection request with any body
	CreateCollectionWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateCollection(ctx context.Context, body CreateCollectionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteCollection request
	DeleteCollection(ctx context.Context, collectionName string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCollection request
	GetCollection(ctx context.Context, collectionName string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateCollection request with any body
	UpdateCollectionWithBody(ctx context.Context, collectionName interface{}, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateCollection(ctx context.Context, collectionName interface{}, body UpdateCollectionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Add request with any body
	AddWithBody(ctx context.Context, collectionName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	Add(ctx context.Context, collectionName string, body AddJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Count request
	Count(ctx context.Context, collectionName string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateIndex request
	CreateIndex(ctx context.Context, collectionName string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Delete request with any body
	DeleteWithBody(ctx context.Context, collectionName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	Delete(ctx context.Context, collectionName string, body DeleteJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Get request with any body
	GetWithBody(ctx context.Context, collectionName interface{}, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	Get(ctx context.Context, collectionName interface{}, body GetJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetNearestNeighbors request with any body
	GetNearestNeighborsWithBody(ctx context.Context, collectionName interface{}, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetNearestNeighbors(ctx context.Context, collectionName interface{}, body GetNearestNeighborsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Update request with any body
	UpdateWithBody(ctx context.Context, collectionName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	Update(ctx context.Context, collectionName string, body UpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Persist request
	Persist(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RawSql request with any body
	RawSqlWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	RawSql(ctx context.Context, body RawSqlJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Reset request
	Reset(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Version request
	Version(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) Root(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRootRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListCollections(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListCollectionsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateCollectionWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateCollectionRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateCollection(ctx context.Context, body CreateCollectionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateCollectionRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteCollection(ctx context.Context, collectionName string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteCollectionRequest(c.Server, collectionName)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCollection(ctx context.Context, collectionName string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCollectionRequest(c.Server, collectionName)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateCollectionWithBody(ctx context.Context, collectionName interface{}, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateCollectionRequestWithBody(c.Server, collectionName, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateCollection(ctx context.Context, collectionName interface{}, body UpdateCollectionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateCollectionRequest(c.Server, collectionName, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AddWithBody(ctx context.Context, collectionName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAddRequestWithBody(c.Server, collectionName, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Add(ctx context.Context, collectionName string, body AddJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAddRequest(c.Server, collectionName, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Count(ctx context.Context, collectionName string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCountRequest(c.Server, collectionName)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateIndex(ctx context.Context, collectionName string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateIndexRequest(c.Server, collectionName)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteWithBody(ctx context.Context, collectionName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteRequestWithBody(c.Server, collectionName, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Delete(ctx context.Context, collectionName string, body DeleteJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteRequest(c.Server, collectionName, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetWithBody(ctx context.Context, collectionName interface{}, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRequestWithBody(c.Server, collectionName, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Get(ctx context.Context, collectionName interface{}, body GetJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRequest(c.Server, collectionName, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetNearestNeighborsWithBody(ctx context.Context, collectionName interface{}, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetNearestNeighborsRequestWithBody(c.Server, collectionName, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetNearestNeighbors(ctx context.Context, collectionName interface{}, body GetNearestNeighborsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetNearestNeighborsRequest(c.Server, collectionName, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateWithBody(ctx context.Context, collectionName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateRequestWithBody(c.Server, collectionName, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Update(ctx context.Context, collectionName string, body UpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateRequest(c.Server, collectionName, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Persist(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPersistRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RawSqlWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRawSqlRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RawSql(ctx context.Context, body RawSqlJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRawSqlRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Reset(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewResetRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Version(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewVersionRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewRootRequest generates requests for Root
func NewRootRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListCollectionsRequest generates requests for ListCollections
func NewListCollectionsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/collections")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateCollectionRequest calls the generic CreateCollection builder with application/json body
func NewCreateCollectionRequest(server string, body CreateCollectionJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateCollectionRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateCollectionRequestWithBody generates requests for CreateCollection with any type of body
func NewCreateCollectionRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/collections")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteCollectionRequest generates requests for DeleteCollection
func NewDeleteCollectionRequest(server string, collectionName string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "collection_name", runtime.ParamLocationPath, collectionName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/collections/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetCollectionRequest generates requests for GetCollection
func NewGetCollectionRequest(server string, collectionName string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "collection_name", runtime.ParamLocationPath, collectionName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/collections/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateCollectionRequest calls the generic UpdateCollection builder with application/json body
func NewUpdateCollectionRequest(server string, collectionName interface{}, body UpdateCollectionJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateCollectionRequestWithBody(server, collectionName, "application/json", bodyReader)
}

// NewUpdateCollectionRequestWithBody generates requests for UpdateCollection with any type of body
func NewUpdateCollectionRequestWithBody(server string, collectionName interface{}, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "collection_name", runtime.ParamLocationPath, collectionName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/collections/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewAddRequest calls the generic Add builder with application/json body
func NewAddRequest(server string, collectionName string, body AddJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAddRequestWithBody(server, collectionName, "application/json", bodyReader)
}

// NewAddRequestWithBody generates requests for Add with any type of body
func NewAddRequestWithBody(server string, collectionName string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "collection_name", runtime.ParamLocationPath, collectionName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/collections/%s/add", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCountRequest generates requests for Count
func NewCountRequest(server string, collectionName string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "collection_name", runtime.ParamLocationPath, collectionName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/collections/%s/count", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateIndexRequest generates requests for CreateIndex
func NewCreateIndexRequest(server string, collectionName string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "collection_name", runtime.ParamLocationPath, collectionName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/collections/%s/create_index", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteRequest calls the generic Delete builder with application/json body
func NewDeleteRequest(server string, collectionName string, body DeleteJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewDeleteRequestWithBody(server, collectionName, "application/json", bodyReader)
}

// NewDeleteRequestWithBody generates requests for Delete with any type of body
func NewDeleteRequestWithBody(server string, collectionName string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "collection_name", runtime.ParamLocationPath, collectionName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/collections/%s/delete", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetRequest calls the generic Get builder with application/json body
func NewGetRequest(server string, collectionName interface{}, body GetJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetRequestWithBody(server, collectionName, "application/json", bodyReader)
}

// NewGetRequestWithBody generates requests for Get with any type of body
func NewGetRequestWithBody(server string, collectionName interface{}, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "collection_name", runtime.ParamLocationPath, collectionName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/collections/%s/get", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetNearestNeighborsRequest calls the generic GetNearestNeighbors builder with application/json body
func NewGetNearestNeighborsRequest(server string, collectionName interface{}, body GetNearestNeighborsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetNearestNeighborsRequestWithBody(server, collectionName, "application/json", bodyReader)
}

// NewGetNearestNeighborsRequestWithBody generates requests for GetNearestNeighbors with any type of body
func NewGetNearestNeighborsRequestWithBody(server string, collectionName interface{}, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "collection_name", runtime.ParamLocationPath, collectionName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/collections/%s/query", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewUpdateRequest calls the generic Update builder with application/json body
func NewUpdateRequest(server string, collectionName string, body UpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateRequestWithBody(server, collectionName, "application/json", bodyReader)
}

// NewUpdateRequestWithBody generates requests for Update with any type of body
func NewUpdateRequestWithBody(server string, collectionName string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "collection_name", runtime.ParamLocationPath, collectionName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/collections/%s/update", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPersistRequest generates requests for Persist
func NewPersistRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/persist")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewRawSqlRequest calls the generic RawSql builder with application/json body
func NewRawSqlRequest(server string, body RawSqlJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewRawSqlRequestWithBody(server, "application/json", bodyReader)
}

// NewRawSqlRequestWithBody generates requests for RawSql with any type of body
func NewRawSqlRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/raw_sql")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewResetRequest generates requests for Reset
func NewResetRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/reset")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewVersionRequest generates requests for Version
func NewVersionRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/version")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// Root request
	RootWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*RootResponse, error)

	// ListCollections request
	ListCollectionsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ListCollectionsResponse, error)

	// CreateCollection request with any body
	CreateCollectionWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateCollectionResponse, error)

	CreateCollectionWithResponse(ctx context.Context, body CreateCollectionJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateCollectionResponse, error)

	// DeleteCollection request
	DeleteCollectionWithResponse(ctx context.Context, collectionName string, reqEditors ...RequestEditorFn) (*DeleteCollectionResponse, error)

	// GetCollection request
	GetCollectionWithResponse(ctx context.Context, collectionName string, reqEditors ...RequestEditorFn) (*GetCollectionResponse, error)

	// UpdateCollection request with any body
	UpdateCollectionWithBodyWithResponse(ctx context.Context, collectionName interface{}, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateCollectionResponse, error)

	UpdateCollectionWithResponse(ctx context.Context, collectionName interface{}, body UpdateCollectionJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateCollectionResponse, error)

	// Add request with any body
	AddWithBodyWithResponse(ctx context.Context, collectionName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AddResponse, error)

	AddWithResponse(ctx context.Context, collectionName string, body AddJSONRequestBody, reqEditors ...RequestEditorFn) (*AddResponse, error)

	// Count request
	CountWithResponse(ctx context.Context, collectionName string, reqEditors ...RequestEditorFn) (*CountResponse, error)

	// CreateIndex request
	CreateIndexWithResponse(ctx context.Context, collectionName string, reqEditors ...RequestEditorFn) (*CreateIndexResponse, error)

	// Delete request with any body
	DeleteWithBodyWithResponse(ctx context.Context, collectionName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteResponse, error)

	DeleteWithResponse(ctx context.Context, collectionName string, body DeleteJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteResponse, error)

	// Get request with any body
	GetWithBodyWithResponse(ctx context.Context, collectionName interface{}, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetResponse, error)

	GetWithResponse(ctx context.Context, collectionName interface{}, body GetJSONRequestBody, reqEditors ...RequestEditorFn) (*GetResponse, error)

	// GetNearestNeighbors request with any body
	GetNearestNeighborsWithBodyWithResponse(ctx context.Context, collectionName interface{}, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetNearestNeighborsResponse, error)

	GetNearestNeighborsWithResponse(ctx context.Context, collectionName interface{}, body GetNearestNeighborsJSONRequestBody, reqEditors ...RequestEditorFn) (*GetNearestNeighborsResponse, error)

	// Update request with any body
	UpdateWithBodyWithResponse(ctx context.Context, collectionName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateResponse, error)

	UpdateWithResponse(ctx context.Context, collectionName string, body UpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateResponse, error)

	// Persist request
	PersistWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*PersistResponse, error)

	// RawSql request with any body
	RawSqlWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*RawSqlResponse, error)

	RawSqlWithResponse(ctx context.Context, body RawSqlJSONRequestBody, reqEditors ...RequestEditorFn) (*RawSqlResponse, error)

	// Reset request
	ResetWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ResetResponse, error)

	// Version request
	VersionWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*VersionResponse, error)
}

type RootResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *interface{}
}

// Status returns HTTPResponse.Status
func (r RootResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RootResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListCollectionsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *interface{}
}

// Status returns HTTPResponse.Status
func (r ListCollectionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListCollectionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateCollectionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *interface{}
	JSON422      *HTTPValidationError
}

// Status returns HTTPResponse.Status
func (r CreateCollectionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateCollectionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteCollectionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *interface{}
	JSON422      *HTTPValidationError
}

// Status returns HTTPResponse.Status
func (r DeleteCollectionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteCollectionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCollectionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *interface{}
	JSON422      *HTTPValidationError
}

// Status returns HTTPResponse.Status
func (r GetCollectionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCollectionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateCollectionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *interface{}
	JSON422      *HTTPValidationError
}

// Status returns HTTPResponse.Status
func (r UpdateCollectionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateCollectionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AddResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *interface{}
	JSON422      *HTTPValidationError
}

// Status returns HTTPResponse.Status
func (r AddResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AddResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CountResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *interface{}
	JSON422      *HTTPValidationError
}

// Status returns HTTPResponse.Status
func (r CountResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CountResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateIndexResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *interface{}
	JSON422      *HTTPValidationError
}

// Status returns HTTPResponse.Status
func (r CreateIndexResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateIndexResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *interface{}
	JSON422      *HTTPValidationError
}

// Status returns HTTPResponse.Status
func (r DeleteResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *interface{}
	JSON422      *HTTPValidationError
}

// Status returns HTTPResponse.Status
func (r GetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetNearestNeighborsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *interface{}
	JSON422      *HTTPValidationError
}

// Status returns HTTPResponse.Status
func (r GetNearestNeighborsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetNearestNeighborsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *interface{}
	JSON422      *HTTPValidationError
}

// Status returns HTTPResponse.Status
func (r UpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PersistResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *interface{}
}

// Status returns HTTPResponse.Status
func (r PersistResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PersistResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RawSqlResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *interface{}
	JSON422      *HTTPValidationError
}

// Status returns HTTPResponse.Status
func (r RawSqlResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RawSqlResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ResetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *interface{}
}

// Status returns HTTPResponse.Status
func (r ResetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ResetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type VersionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *interface{}
}

// Status returns HTTPResponse.Status
func (r VersionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r VersionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// RootWithResponse request returning *RootResponse
func (c *ClientWithResponses) RootWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*RootResponse, error) {
	rsp, err := c.Root(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRootResponse(rsp)
}

// ListCollectionsWithResponse request returning *ListCollectionsResponse
func (c *ClientWithResponses) ListCollectionsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ListCollectionsResponse, error) {
	rsp, err := c.ListCollections(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListCollectionsResponse(rsp)
}

// CreateCollectionWithBodyWithResponse request with arbitrary body returning *CreateCollectionResponse
func (c *ClientWithResponses) CreateCollectionWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateCollectionResponse, error) {
	rsp, err := c.CreateCollectionWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateCollectionResponse(rsp)
}

func (c *ClientWithResponses) CreateCollectionWithResponse(ctx context.Context, body CreateCollectionJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateCollectionResponse, error) {
	rsp, err := c.CreateCollection(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateCollectionResponse(rsp)
}

// DeleteCollectionWithResponse request returning *DeleteCollectionResponse
func (c *ClientWithResponses) DeleteCollectionWithResponse(ctx context.Context, collectionName string, reqEditors ...RequestEditorFn) (*DeleteCollectionResponse, error) {
	rsp, err := c.DeleteCollection(ctx, collectionName, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteCollectionResponse(rsp)
}

// GetCollectionWithResponse request returning *GetCollectionResponse
func (c *ClientWithResponses) GetCollectionWithResponse(ctx context.Context, collectionName string, reqEditors ...RequestEditorFn) (*GetCollectionResponse, error) {
	rsp, err := c.GetCollection(ctx, collectionName, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCollectionResponse(rsp)
}

// UpdateCollectionWithBodyWithResponse request with arbitrary body returning *UpdateCollectionResponse
func (c *ClientWithResponses) UpdateCollectionWithBodyWithResponse(ctx context.Context, collectionName interface{}, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateCollectionResponse, error) {
	rsp, err := c.UpdateCollectionWithBody(ctx, collectionName, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateCollectionResponse(rsp)
}

func (c *ClientWithResponses) UpdateCollectionWithResponse(ctx context.Context, collectionName interface{}, body UpdateCollectionJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateCollectionResponse, error) {
	rsp, err := c.UpdateCollection(ctx, collectionName, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateCollectionResponse(rsp)
}

// AddWithBodyWithResponse request with arbitrary body returning *AddResponse
func (c *ClientWithResponses) AddWithBodyWithResponse(ctx context.Context, collectionName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AddResponse, error) {
	rsp, err := c.AddWithBody(ctx, collectionName, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAddResponse(rsp)
}

func (c *ClientWithResponses) AddWithResponse(ctx context.Context, collectionName string, body AddJSONRequestBody, reqEditors ...RequestEditorFn) (*AddResponse, error) {
	rsp, err := c.Add(ctx, collectionName, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAddResponse(rsp)
}

// CountWithResponse request returning *CountResponse
func (c *ClientWithResponses) CountWithResponse(ctx context.Context, collectionName string, reqEditors ...RequestEditorFn) (*CountResponse, error) {
	rsp, err := c.Count(ctx, collectionName, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCountResponse(rsp)
}

// CreateIndexWithResponse request returning *CreateIndexResponse
func (c *ClientWithResponses) CreateIndexWithResponse(ctx context.Context, collectionName string, reqEditors ...RequestEditorFn) (*CreateIndexResponse, error) {
	rsp, err := c.CreateIndex(ctx, collectionName, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateIndexResponse(rsp)
}

// DeleteWithBodyWithResponse request with arbitrary body returning *DeleteResponse
func (c *ClientWithResponses) DeleteWithBodyWithResponse(ctx context.Context, collectionName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteResponse, error) {
	rsp, err := c.DeleteWithBody(ctx, collectionName, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteResponse(rsp)
}

func (c *ClientWithResponses) DeleteWithResponse(ctx context.Context, collectionName string, body DeleteJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteResponse, error) {
	rsp, err := c.Delete(ctx, collectionName, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteResponse(rsp)
}

// GetWithBodyWithResponse request with arbitrary body returning *GetResponse
func (c *ClientWithResponses) GetWithBodyWithResponse(ctx context.Context, collectionName interface{}, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetResponse, error) {
	rsp, err := c.GetWithBody(ctx, collectionName, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetResponse(rsp)
}

func (c *ClientWithResponses) GetWithResponse(ctx context.Context, collectionName interface{}, body GetJSONRequestBody, reqEditors ...RequestEditorFn) (*GetResponse, error) {
	rsp, err := c.Get(ctx, collectionName, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetResponse(rsp)
}

// GetNearestNeighborsWithBodyWithResponse request with arbitrary body returning *GetNearestNeighborsResponse
func (c *ClientWithResponses) GetNearestNeighborsWithBodyWithResponse(ctx context.Context, collectionName interface{}, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetNearestNeighborsResponse, error) {
	rsp, err := c.GetNearestNeighborsWithBody(ctx, collectionName, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetNearestNeighborsResponse(rsp)
}

func (c *ClientWithResponses) GetNearestNeighborsWithResponse(ctx context.Context, collectionName interface{}, body GetNearestNeighborsJSONRequestBody, reqEditors ...RequestEditorFn) (*GetNearestNeighborsResponse, error) {
	rsp, err := c.GetNearestNeighbors(ctx, collectionName, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetNearestNeighborsResponse(rsp)
}

// UpdateWithBodyWithResponse request with arbitrary body returning *UpdateResponse
func (c *ClientWithResponses) UpdateWithBodyWithResponse(ctx context.Context, collectionName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateResponse, error) {
	rsp, err := c.UpdateWithBody(ctx, collectionName, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateResponse(rsp)
}

func (c *ClientWithResponses) UpdateWithResponse(ctx context.Context, collectionName string, body UpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateResponse, error) {
	rsp, err := c.Update(ctx, collectionName, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateResponse(rsp)
}

// PersistWithResponse request returning *PersistResponse
func (c *ClientWithResponses) PersistWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*PersistResponse, error) {
	rsp, err := c.Persist(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePersistResponse(rsp)
}

// RawSqlWithBodyWithResponse request with arbitrary body returning *RawSqlResponse
func (c *ClientWithResponses) RawSqlWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*RawSqlResponse, error) {
	rsp, err := c.RawSqlWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRawSqlResponse(rsp)
}

func (c *ClientWithResponses) RawSqlWithResponse(ctx context.Context, body RawSqlJSONRequestBody, reqEditors ...RequestEditorFn) (*RawSqlResponse, error) {
	rsp, err := c.RawSql(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRawSqlResponse(rsp)
}

// ResetWithResponse request returning *ResetResponse
func (c *ClientWithResponses) ResetWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ResetResponse, error) {
	rsp, err := c.Reset(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseResetResponse(rsp)
}

// VersionWithResponse request returning *VersionResponse
func (c *ClientWithResponses) VersionWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*VersionResponse, error) {
	rsp, err := c.Version(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseVersionResponse(rsp)
}

// ParseRootResponse parses an HTTP response from a RootWithResponse call
func ParseRootResponse(rsp *http.Response) (*RootResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RootResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseListCollectionsResponse parses an HTTP response from a ListCollectionsWithResponse call
func ParseListCollectionsResponse(rsp *http.Response) (*ListCollectionsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListCollectionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateCollectionResponse parses an HTTP response from a CreateCollectionWithResponse call
func ParseCreateCollectionResponse(rsp *http.Response) (*CreateCollectionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateCollectionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest HTTPValidationError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseDeleteCollectionResponse parses an HTTP response from a DeleteCollectionWithResponse call
func ParseDeleteCollectionResponse(rsp *http.Response) (*DeleteCollectionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteCollectionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest HTTPValidationError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseGetCollectionResponse parses an HTTP response from a GetCollectionWithResponse call
func ParseGetCollectionResponse(rsp *http.Response) (*GetCollectionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCollectionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest HTTPValidationError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseUpdateCollectionResponse parses an HTTP response from a UpdateCollectionWithResponse call
func ParseUpdateCollectionResponse(rsp *http.Response) (*UpdateCollectionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateCollectionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest HTTPValidationError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseAddResponse parses an HTTP response from a AddWithResponse call
func ParseAddResponse(rsp *http.Response) (*AddResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AddResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest HTTPValidationError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseCountResponse parses an HTTP response from a CountWithResponse call
func ParseCountResponse(rsp *http.Response) (*CountResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CountResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest HTTPValidationError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseCreateIndexResponse parses an HTTP response from a CreateIndexWithResponse call
func ParseCreateIndexResponse(rsp *http.Response) (*CreateIndexResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateIndexResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest HTTPValidationError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseDeleteResponse parses an HTTP response from a DeleteWithResponse call
func ParseDeleteResponse(rsp *http.Response) (*DeleteResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest HTTPValidationError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseGetResponse parses an HTTP response from a GetWithResponse call
func ParseGetResponse(rsp *http.Response) (*GetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest HTTPValidationError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseGetNearestNeighborsResponse parses an HTTP response from a GetNearestNeighborsWithResponse call
func ParseGetNearestNeighborsResponse(rsp *http.Response) (*GetNearestNeighborsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetNearestNeighborsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest HTTPValidationError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseUpdateResponse parses an HTTP response from a UpdateWithResponse call
func ParseUpdateResponse(rsp *http.Response) (*UpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest HTTPValidationError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParsePersistResponse parses an HTTP response from a PersistWithResponse call
func ParsePersistResponse(rsp *http.Response) (*PersistResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PersistResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseRawSqlResponse parses an HTTP response from a RawSqlWithResponse call
func ParseRawSqlResponse(rsp *http.Response) (*RawSqlResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RawSqlResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest HTTPValidationError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseResetResponse parses an HTTP response from a ResetWithResponse call
func ParseResetResponse(rsp *http.Response) (*ResetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ResetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseVersionResponse parses an HTTP response from a VersionWithResponse call
func ParseVersionResponse(rsp *http.Response) (*VersionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &VersionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}
